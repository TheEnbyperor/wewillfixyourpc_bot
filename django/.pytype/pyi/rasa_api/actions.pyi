# (generated with --quick)

import fulfillment.models
import io
from typing import Any, Dict, List, Mapping, Optional, Tuple, Type, Union

Action: Any
BytesIO: Type[io.BytesIO]
CollectingDispatcher: Any
DefaultStorage: Any
FormAction: Any
Image: module
Tracker: Any
collections: module
datetime: module
dateutil: module
functools: module
fuzzywuzzy: module
inflect: module
json: module
keycloak: module
keycloak_auth: module
models: module
operator_interface: module
p: Any
payment: module
phonenumbers: module
pytz: module
random: module
rasa_api: module
rasa_sdk: module
requests: module
reverse: Any
settings: Any
timezone: module
tz: Union[pytz._DstTzInfo, pytz._StaticTzInfo, pytz._UTCclass]

class ActionAskAffirmation(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionCatPic(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionContact(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionContactEmail(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionContactPhone(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionGreet(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionLocation(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionMoveToWebForm(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionOpeningHours(Any):
    def format_day(self, day: Mapping[int, Any]) -> str: ...
    @staticmethod
    def format_hours(time: Union[fulfillment.models.OpeningHours, fulfillment.models.OpeningHoursOverride]) -> str: ...
    def name(self) -> str: ...
    @staticmethod
    def reduce_days(days: List[Tuple[str, str, fulfillment.models.OpeningHours]]) -> List[Tuple[str, str, fulfillment.models.OpeningHours]]: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionOrderUnlock(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionRateSlot(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionRepair(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionRepairBookCheck(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionRepairBookClarify(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionRequestHuman(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionSignIn(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionUnlockClear(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionUnlockLookup(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class ActionUpdateInfoSlots(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

class RateForm(Any):
    def name(self) -> str: ...
    @staticmethod
    def required_slots(tracker) -> List[str]: ...
    def slot_mappings(self) -> Dict[str, list]: ...
    def submit(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[dict]: ...
    def validate_rating(self, value: str, dispatcher, tracker, domain: Dict[str, Any]) -> Optional[Dict[str, Any]]: ...

class RepairBookForm(Any):
    def name(self) -> str: ...
    @staticmethod
    def required_slots(tracker) -> List[str]: ...
    def slot_mappings(self) -> Dict[str, Any]: ...
    def submit(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[dict]: ...

class RepairForm(Any):
    def name(self) -> str: ...
    @staticmethod
    def required_slots(tracker) -> List[str]: ...
    def slot_mappings(self) -> Dict[str, list]: ...
    def submit(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[dict]: ...
    def validate_brand(self, value: str, dispatcher, tracker, domain: Dict[str, Any]) -> Optional[Dict[str, Any]]: ...
    def validate_device_model(self, value: str, dispatcher, tracker, domain: Dict[str, Any]) -> Optional[Dict[str, Any]]: ...
    def validate_device_repair(self, value: str, dispatcher, tracker, domain: Dict[str, Any]) -> Optional[Dict[str, Any]]: ...

class UnlockLookupForm(Any):
    def name(self) -> str: ...
    @staticmethod
    def required_slots(tracker) -> List[str]: ...
    def slot_mappings(self) -> Dict[str, list]: ...
    def submit(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[dict]: ...
    def validate_brand(self, value: str, dispatcher, tracker, domain: Dict[str, Any]) -> Optional[Dict[str, Any]]: ...
    def validate_device_model(self, value: str, dispatcher, tracker, domain: Dict[str, Any]) -> Optional[Dict[str, Any]]: ...
    def validate_network(self, value: str, dispatcher, tracker, domain: Dict[str, Any]) -> Optional[Dict[str, Any]]: ...

class UnlockOrderForm(Any):
    @staticmethod
    def luhn_checksum(number) -> Any: ...
    def name(self) -> str: ...
    @staticmethod
    def required_slots(tracker) -> List[str]: ...
    def slot_mappings(self) -> Dict[str, Any]: ...
    def submit(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[dict]: ...
    def validate_email(self, value: str, dispatcher, tracker, domain: Dict[str, Any]) -> Optional[Dict[str, Any]]: ...
    def validate_imei(self, value: str, dispatcher, tracker, domain: Dict[str, Any]) -> Optional[Dict[str, Any]]: ...
    def validate_network(self, value: str, dispatcher, tracker, domain: Dict[str, Any]) -> Optional[Dict[str, Any]]: ...
    def validate_phone_number(self, value: str, dispatcher, tracker, domain: Dict[str, Any]) -> Optional[Dict[str, Any]]: ...

class UnlockOrderWebForm(Any):
    def name(self) -> str: ...
    def run(self, dispatcher, tracker, domain: Dict[str, Any]) -> List[Dict[str, Any]]: ...

def get_one_or_none(**kwargs) -> Any: ...
def is_open() -> bool: ...
def sender_id_to_conversation(sender_id) -> Any: ...
def validate_brand(value: str, dispatcher, tracker) -> Dict[str, Any]: ...
def validate_device_model(value: str, dispatcher, tracker) -> Dict[str, Any]: ...
