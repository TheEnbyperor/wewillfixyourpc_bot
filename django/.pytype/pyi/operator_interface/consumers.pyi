# (generated with --quick)

import operator_interface.models
import payment.models
from typing import Any, Coroutine, Iterable, Mapping

AsyncJsonWebsocketConsumer: Any
async_to_sync: Any
channel_layer: Any
conversation_saved: Any
database_sync_to_async: Any
datetime: module
get_channel_layer: Any
keycloak: module
keycloak_auth: module
message_saved: Any
operator_interface: module
payment: module
payment_item_saved: Any
payment_saved: Any
post_save: Any
receiver: Any
static: Any
uuid: module

class OperatorConsumer(Any):
    get_conversation: Any
    get_message: Any
    get_messages: Any
    get_payment: Any
    get_payment_item: Any
    lookup_customer: Any
    save_object: Any
    user: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def connect(self) -> Coroutine[Any, Any, None]: ...
    def conversation_update(self, event: Mapping[str, Any]) -> Coroutine[Any, Any, None]: ...
    def disconnect(self, close_code) -> Coroutine[Any, Any, None]: ...
    def make_message(self, cid, text) -> Coroutine[Any, Any, None]: ...
    def make_payment_request(self, cid, items: Iterable) -> Coroutine[Any, Any, None]: ...
    def message(self, event: Mapping[str, Any]) -> Coroutine[Any, Any, None]: ...
    def message_update(self, event: Mapping[str, Any]) -> Coroutine[Any, Any, None]: ...
    def payment_item_update(self, event: Mapping[str, Any]) -> Coroutine[Any, Any, None]: ...
    def payment_update(self, event: Mapping[str, Any]) -> Coroutine[Any, Any, None]: ...
    def receive_json(self, message: Mapping[str, Any], **kwargs) -> Coroutine[Any, Any, None]: ...
    def send_conversation(self, conversation: operator_interface.models.Conversation) -> Coroutine[Any, Any, None]: ...
    def send_message(self, message: operator_interface.models.Message) -> Coroutine[Any, Any, None]: ...
    def send_payment(self, payment: payment.models.Payment) -> Coroutine[Any, Any, None]: ...
    def send_payment_item(self, payment_item: payment.models.PaymentItem) -> Coroutine[Any, Any, None]: ...
